{"version":3,"sources":["myfbase.js","components/AuthShop.js","components/AuthSocial.js","routes/Authentication.js","components/Twittwit.js","components/TwitShop.js","routes/Home.js","components/Nav.js","routes/Profile.js","components/RouterCode.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","databaseURL","messagingSenderId","appId","measurementId","firebaseInst","authService","auth","dbService","firestore","storageService","storage","AuthShop","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","event","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","data","signInWithEmailAndPassword","console","log","message","className","type","placeholder","required","onClick","prev","AuthSocial","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faGoogle","faGithub","Authentication","faTwitter","color","size","style","marginBottom","Twittwit","twitObj","isMaster","editTwit","setEditTwit","text","newTwit","setNewTwit","onDeleteClick","ok","window","confirm","doc","id","delete","attachmentUrl","refFromURL","triggerEdit","update","autoFocus","src","class","faTrash","faPencilAlt","TwitShop","userObj","twit","setTwit","attachment","setAttachment","fileReference","ref","child","uid","uuidv4","putString","fileResponse","getDownloadURL","twitObjs","createdAt","Date","now","creatorId","collection","add","maxLength","for","faPlus","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","opacity","backgroundImage","faTimes","Home","existTwits","setExistTwits","useEffect","onSnapshot","snapshot","twitArray","docs","map","marginTop","Nav","display","justifyContent","to","marginRight","marginLeft","flexDirection","alignItems","fontSize","faUser","displayName","userRefresh","history","useHistory","newDisplayer","setNewDisplayer","updateProfile","signOut","push","RouterCode","isLoggedIn","exact","path","Profile","App","init","setInit","setUserObj","onAuthStateChanged","user","args","currentUser","Boolean","getFullYear","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ef205e6c.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/auth\"\r\nimport \"firebase/firestore\"\r\nimport \"firebase/storage\"\r\n\r\nconst firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_API_KEY,\r\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n    projectId: process.env.REACT_APP_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\r\n    messagingSenderId: process.env.REACT_APP_MESSAGIN_ID,\r\n    appId: process.env.REACT_APP_APP_ID,\r\n    measurementId: process.env.REACT_APP_MEASUR_ID\r\n  };\r\n\r\nfirebase.initializeApp(firebaseConfig)\r\n\r\nexport const firebaseInst = firebase\r\nexport const authService = firebase.auth()\r\nexport const dbService = firebase.firestore()\r\nexport const storageService = firebase.storage()","import React, { useState } from \"react\"\r\nimport { authService } from \"myfbase\"\r\n\r\nconst AuthShop = () => {\r\n    const [email, setEmail] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [newAccount, setNewAccount] = useState(true)\r\n    const [error,setError] = useState(\"\")\r\n    const onChange = (event) => {\r\n        const {target: {name, value}} = event\r\n        if (name === \"email\") {\r\n            setEmail(value)\r\n        } else if (name ===\"password\") {\r\n            setPassword(value)\r\n        }\r\n    }\r\n    const onSubmit = async(event) => {\r\n        event.preventDefault()\r\n        try {\r\n            let data\r\n            if (newAccount) {\r\n                data = await authService.createUserWithEmailAndPassword(\r\n                    email, password\r\n                )\r\n            } else {\r\n                data = await authService.signInWithEmailAndPassword(\r\n                    email, password\r\n                )\r\n            }\r\n            console.log(data)\r\n        } catch(error) {\r\n            setError(error.message)\r\n        }\r\n    }\r\n\r\n    const toggleAccount = () =>{\r\n        setNewAccount((prev) => !prev)\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={onSubmit} className=\"container\">\r\n                <input name= \"email\" type= \"email\" placeholder=\"email\" required value={email} onChange= {onChange} className=\"authInput\"/>\r\n                <input name= \"password\" type= \"password\" placeholder= \"Password\" required value={password} onChange={onChange} className = \"authInput\"/>\r\n                <input type=\"submit\" className = \"authInput authSubmit\" value= {newAccount ? \"Create Account\" : \"Log In\"}/>\r\n                {error && <span className=\"authError\">{error}</span>}\r\n            </form>\r\n            <span onClick={toggleAccount} className = \"authSwitch\">{newAccount ? \"Log In\" : \"Create Account\"}</span>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AuthShop","import React from \"react\"\r\nimport { authService, firebaseInst } from 'myfbase'\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\"\r\nimport { faGoogle, faGithub} from \"@fortawesome/free-brands-svg-icons\"\r\n\r\nconst AuthSocial = () => {\r\n\r\n    const onSocialClick = async(event) => {\r\n        const {target:{name}} = (event)\r\n        let provider\r\n        if (name === \"Google\") {\r\n            provider = new firebaseInst.auth.GoogleAuthProvider()\r\n        } else if (name ===\"Github\") {\r\n            provider = new firebaseInst.auth.GithubAuthProvider()\r\n        }\r\n        await authService.signInWithPopup(provider)\r\n    }\r\n    return (\r\n        <div className =\"authBtns\">\r\n            <>\r\n                <button onClick = {onSocialClick} name=\"Google\" className=\"authBtn\">Continue with Google <FontAwesomeIcon icon={faGoogle} /></button>\r\n                <button onClick = {onSocialClick} name=\"Github\" className=\"authBtn\">Continue with Github <FontAwesomeIcon icon={faGithub} /></button>\r\n            </>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AuthSocial","import React from 'react'\r\nimport AuthShop from \"components/AuthShop\"\r\nimport AuthSocial from \"components/AuthSocial\"\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\"\r\nimport {faTwitter} from \"@fortawesome/free-brands-svg-icons\"\r\n\r\nconst Authentication = () => {\r\n\r\n    return (\r\n    <div className=\"authContainer\"><FontAwesomeIcon icon={faTwitter} color=\"#04AAFF\" size=\"3x\" style={{marginBottom: 30}}/>\r\n        <AuthShop />\r\n        <div>\r\n            <AuthSocial />\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Authentication","import { dbService, storageService } from \"myfbase\"\r\nimport React, { useState } from \"react\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport {faTrash, faPencilAlt} from \"@fortawesome/free-solid-svg-icons\"\r\n\r\nconst Twittwit = ({twitObj, isMaster}) => {\r\n    const [editTwit, setEditTwit] = useState(false)\r\n    const [newTwit, setNewTwit] = useState(twitObj.text)\r\n    const onDeleteClick = async () => {\r\n        const ok = window.confirm(\"Are you sure you want to delete this?\")\r\n        console.log(ok)\r\n        if (ok) {\r\n           await dbService.doc(`twits/${twitObj.id}`).delete()\r\n           if (twitObj.attachmentUrl !== \"\") {\r\n               await storageService.refFromURL(twitObj.attachmentUrl).delete()\r\n           }\r\n        }\r\n    }\r\n\r\n    const triggerEdit = () => setEditTwit((prev) =>!prev)\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault()\r\n        await dbService.doc(`twits/${twitObj.id}`).update({\r\n            text : newTwit\r\n        })\r\n        setEditTwit(false)\r\n    }\r\n    const onChange = (event) => {\r\n        const {\r\n            target: {value}\r\n        } = event\r\n        setNewTwit(value)\r\n    }    \r\n    return (\r\n        <div className= \"twit\">\r\n            {\r\n                editTwit ? (\r\n                <>\r\n                    <form onSubmit = {onSubmit} className=\"container twitEdit\">\r\n                        <input type=\"text\" placeholder=\"Edit your Twit\" value={newTwit} required autoFocus onChange={onChange} className=\"formInput\"/>\r\n                        <input type=\"submit\" value=\"Update Twit\" className=\"formBtn\"/>\r\n                    </form>\r\n                    <span onClick = {triggerEdit} className=\"formBtn cancelBtn\">\r\n                        Cancel \r\n                    </span>\r\n                </>\r\n                ) : ( \r\n                    <>\r\n                        <h4>{twitObj.text}</h4>\r\n                            {twitObj.attachmentUrl && <img src={twitObj.attachmentUrl}/>}\r\n                            {isMaster && (\r\n                            <div class=\"twit__actions\">\r\n                                <span onClick={onDeleteClick}>\r\n                                    <FontAwesomeIcon icon={faTrash} />\r\n                                </span>\r\n                                <span onClick={triggerEdit}>\r\n                                    <FontAwesomeIcon icon={faPencilAlt} />\r\n                                </span>\r\n                          </div>\r\n                        )}\r\n                    </>\r\n                )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Twittwit","import React, {useState} from \"react\"\r\nimport { v4 as uuidv4 } from \"uuid\"\r\nimport {storageService, dbService} from \"myfbase\"\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\"\r\nimport {faPlus, faTimes} from \"@fortawesome/free-solid-svg-icons\"\r\n\r\nconst TwitShop = ({userObj}) => {\r\n    const [twit, setTwit] = useState(\"\")\r\n    const [attachment, setAttachment] = useState(\"\")\r\n    const onSubmit = async(event) => {\r\n        if (twit === \"\") {\r\n            return;\r\n        }\r\n        event.preventDefault()\r\n        let attachmentUrl = \"\"\r\n        if (attachment !== \"\") {\r\n            const fileReference = storageService.ref().child(`${userObj.uid}/${uuidv4()}`)\r\n            const fileResponse = await fileReference.putString(attachment, \"data_url\")\r\n            attachmentUrl = await fileResponse.ref.getDownloadURL()\r\n        }\r\n        const twitObjs = {\r\n            text : twit,\r\n            createdAt: Date.now(),\r\n            creatorId : userObj.uid,\r\n            attachmentUrl\r\n        }\r\n        await dbService.collection(\"twits\").add(twitObjs)\r\n        setTwit(\"\")\r\n        setAttachment(\"\")\r\n    }\r\n\r\n    const onChange = (event) => {\r\n        const {\r\n            target : { value }\r\n        } = event\r\n        setTwit(value)\r\n    }\r\n    const onFileChange = (event) =>{\r\n        const {\r\n            target: { files }\r\n        } = event\r\n        const theFile = files[0]\r\n        const reader = new FileReader();\r\n        reader.onloadend = (finishedEvent) => {\r\n            const {currentTarget : {result}} = finishedEvent\r\n            setAttachment(result)\r\n        }\r\n        reader.readAsDataURL(theFile)\r\n    } \r\n    const onClearAttachClick = () => setAttachment(\"\")\r\n    return (\r\n        <form onSubmit={onSubmit} className=\"shopForm\">\r\n            <div className=\"shopInput__container\">\r\n                <input className=\"shopInput__input\" value={twit} onChange={onChange} type=\"text\" placeholder=\"What's on your mind?\" maxLength={120}/>\r\n                <input type=\"submit\" value=\"&rarr;\" className=\"shopInput__arrow\" />\r\n            </div>\r\n        <label for=\"attach-file\" className=\"shopInput__label\">\r\n        <span>Add photos</span>\r\n        <FontAwesomeIcon icon={faPlus} />\r\n        </label>\r\n            <input id=\"attach-file\" type=\"file\" accept=\"image/*\" onChange={onFileChange} style={{ opacity: 0 }}/>\r\n            {attachment && (\r\n                <div className=\"shopForm__attachment\">\r\n                    <img src={attachment} style={{ backgroundImage: attachment }}/>\r\n                    <div className=\"shopForm__clear\" onClick={onClearAttachClick}>\r\n                        <span>Remove</span>\r\n                        <FontAwesomeIcon icon={faTimes} />\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default TwitShop","import { dbService } from \"myfbase\"\r\nimport React, {useState, useEffect} from 'react'\r\nimport Twittwit from \"components/Twittwit\"\r\nimport TwitShop from \"components/TwitShop\"\r\n\r\nconst Home = ({userObj}) => {\r\n    const [existTwits, setExistTwits] = useState([])\r\n    useEffect (() =>{\r\n        dbService.collection(\"twits\").onSnapshot(snapshot => {\r\n            const twitArray = snapshot.docs.map(doc => ({\r\n                id:doc.id,\r\n                ...doc.data(),\r\n            }))\r\n            setExistTwits(twitArray)\r\n         })\r\n    }, []);\r\n\r\n   return (\r\n\r\n        <div className=\"container\">\r\n            <TwitShop userObj = {userObj} />\r\n            <div style={{marginTop:30}}>\r\n                {existTwits.map(twit => (\r\n                <Twittwit key={twit.id} twitObj = {twit} isMaster = {twit.creatorId === userObj.uid}/>\r\n                ))}\r\n            </div>\r\n        </div>\r\n\r\n   )\r\n}\r\n\r\nexport default Home","import React from \"react\"\r\nimport {Link} from \"react-router-dom\"\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faTwitter} from \"@fortawesome/free-brands-svg-icons\"\r\nimport {faUser} from \"@fortawesome/free-solid-svg-icons\"\r\n\r\nconst Nav = ({ userObj }) => (\r\n    <nav>\r\n        <ul style={{display: \"flex\", justifyContent: \"center\", marginTop:50}}>\r\n            <li>\r\n                <Link to=\"/\" style={{marginRight: 10}}>\r\n                    <FontAwesomeIcon icon= {faTwitter} color={\"#04AAFF\"} size=\"2x\"/>\r\n                </Link>\r\n            </li>\r\n            <li>\r\n                <Link to=\"/profile\" style={{ marginLeft:10, display: \"flex\", flexDirection: \"column\", alignItems: \"center\", fontSize: 12}}>\r\n                    <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\"/>\r\n                    <span style={{marginTop: 10}}>\r\n                        {userObj.displayName ? `${userObj.displayName}'s Profile` : \"Profile\"}\r\n                    </span>\r\n                </Link>\r\n            </li>\r\n        </ul>\r\n    </nav>\r\n)\r\n\r\nexport default Nav","import { authService /*, dbService*/ } from \"myfbase\"\r\nimport {useHistory} from \"react-router-dom\"\r\nimport React, { /*useEffect,*/ useState } from \"react\"\r\n\r\nexport default ({ userRefresh, userObj }) => { \r\n    const history = useHistory()\r\n    const [newDisplayer, setNewDisplayer] = useState(userObj.displayName)\r\n    const onLogOutClick = () => {\r\n        authService.signOut()\r\n        history.push(\"/\")\r\n    }\r\n    /* const getMyTwits = async() => {\r\n        const twits = await dbService.collection(\"twits\").where(\"creatorId\", \"==\", userObj.uid).orderBy(\"createdAt\").get() // Needs Index (noSQL DB)\r\n        console.log(twits.docs.map((doc) => doc.data()))\r\n    } */\r\n\r\n    const onChange = (event) => {\r\n        const {\r\n            target: {value},\r\n        } =event\r\n        setNewDisplayer(value)\r\n    }\r\n\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault()\r\n        if (userObj.displayName !== \"newDisplayer\") {\r\n            await userObj.updateProfile({\r\n                displayName : newDisplayer\r\n            })\r\n            userRefresh()\r\n        }\r\n    }\r\n\r\n    /* useEffect(() =>{\r\n        getMyTwits()\r\n    }, []) */\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <form onSubmit={onSubmit} className=\"profileForm\">\r\n                <input type=\"text\" autoFocus placeholder=\"Display Name\" onChange={onChange} value={newDisplayer} className=\"formInput\"/>\r\n                <input type=\"submit\" value=\"Update Profile\" className=\"formBtn\" style={{marginTop : 10}}/>\r\n            </form>\r\n            <span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>\r\n                Log Out\r\n            </span> \r\n        </div>\r\n    )\r\n}","import React from \"react\"\r\nimport {HashRouter as Router, Route, Switch} from \"react-router-dom\"\r\nimport Authentication from \"../routes/Authentication\"\r\nimport Home from \"../routes/Home\"\r\nimport Nav from \"components/Nav\"\r\nimport Profile from \"routes/Profile\"\r\n\r\nconst RouterCode = ({ userRefresh, isLoggedIn , userObj }) => {\r\n    return (\r\n        <Router>\r\n            {isLoggedIn && <Nav userObj = {userObj}/>}\r\n            <Switch>\r\n                {isLoggedIn ? \r\n                <>\r\n                <Route exact path=\"/\">\r\n                    <Home userObj = {userObj}/>\r\n                </Route>\r\n                <Route exact path=\"/profile\">\r\n                    <Profile userObj = {userObj} userRefresh = {userRefresh}/>\r\n                </Route>\r\n                </> : <>\r\n                <Route exact path=\"/\">\r\n                    <Authentication/>\r\n                </Route>\r\n                </>\r\n                }\r\n            </Switch>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default RouterCode","import React, {useEffect, useState} from 'react';\nimport RouterCode from 'components/RouterCode';\nimport {authService} from \"myfbase\";\n\nfunction App() {\n  const [init, setInit] = useState(false)\n  const [userObj, setUserObj] = useState(null)\n  useEffect(() => {\n    authService.onAuthStateChanged((user) =>{\n      if (user) {\n        /* \n        setUserObj(user)\n        */\n        setUserObj({\n          displayName:user.displayName,\n          uid:user.uid,\n          updateProfile: (args) => user.updateProfile(args)\n        })\n      } else {\n        setUserObj(null)\n      }\n      setInit(true)\n    })\n  }, [])\n  const userRefresh = () => {\n    const user = authService.currentUser\n    setUserObj(/*Object.assign({}, user)*/{\n      displayName:user.displayName,\n      uid:user.uid,\n      updateProfile: (args) => user.updateProfile(args)\n    })\n  } //Update Profile : refreshes user in the firebase, but Nav is not connected to the FB\n  return (\n    <>\n    {init ? <RouterCode userRefresh = {userRefresh} isLoggedIn = {Boolean(userObj)} userObj = {userObj}/>: \"Initializing Process Ongoing.\"}\n    <footer>&copy; TwitClone, {new Date().getFullYear()}</footer>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport \"./styles.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}